<?php

namespace Qero\PackagesManager;
use Qero\Printer\Printer;
use Qero\Requester\Requester;
use Qero\AutoloadGenerator\AutoloadGenerator;

define ('QERO_AUTOGENERATE', '

/*
    Auto generated by Qero '. QERO_VERSION .'
    '. date ('Y/m/d H:i:s') .' (timestamp: '. time () .')
*/

');

define ('QERO_PROGRESS_STEPS', 8);

class PackagesManager
{
    /**
     * Массив настроек
     */
    public $settings = array ();

    /**
     * Список индексов, которые будут парситься из файла "qero-info.json" в... "qero-info.json"
     */
    protected $parse = array
    (
        'version',
        'entry_point'
    );

    /**
     * Список имён начальных файлов для подключение (в порядке понижения приоритета)
     */
    protected $enteringPoints = array
    (
        'qero-init.php',
        'qero-main.php',
        'main.php',
        'index.php',
        'autorun.php',
        'startup.php'
    );

    public function __construct ()
    {
        if (!file_exists (QERO_DIR .'/qero-packages/qero-info.json'))
            $this->updateSettings ();
        
        $this->settings = json_decode (file_get_contents (QERO_DIR .'/qero-packages/qero-info.json'), true);
    }

    /**
     * Установка пакета
     * 
     * @param string $package - полное название пакета
     * @return bool - возвращает статус установки пакета
     * 
     */

    public function installPackage ($package)
    {
        $packageInfo = $this->getPackageBlocks ($package);

        switch ($packageInfo['source'])
        {
            case 'github':
                $source = 'Qero\Sources\GitHub\GitHub';
            break;

            case 'gitlab':
                $source = 'Qero\Sources\GitLab\GitLab';
            break;

            case 'bitbucket':
                $source = 'Qero\Sources\BitBucket\BitBucket';
            break;

            default:
                Printer::say ('Source "'. $packageInfo['source'] .'" not founded. Skipping...', 2);

                return false;
            break;
        }

        $package = $packageInfo['full_name'];
        $info    = $source::getPackageInfo ($package);

        if (!is_array ($info))
        {
            Printer::say ('Repository "'. $package .'" not founded. Skipping...', 1);

            return false;
        }

        $commit = $source::getPackageCommit ($package);
        
        if ($commit === false || !isset ($commit[$source::$watermark]))
        {
            Printer::say ('Repository "'. $package .'" not founded. Skipping...', 1);

            return false;
        }

        if (isset ($this->settings['packages'][$packageInfo['full_path']]))
        {
            if ($commit[$source::$watermark] == $this->settings['packages'][$packageInfo['full_path']]['watermark'])
            {
                Printer::say ('Repository "'. $package .'" already installed. Skipping...', 1);

                $this->registerNewPackage ($package, $commit, $source);

                return false;
            }

            else Printer::say ('Repository "'. $package .'" already installed, but version is outdated. Updating...', 1);
        }

        Printer::say ('Installing "'. $package .'"...');

        \Qero\dir_delete (QERO_DIR .'/qero-packages/'. $package);
        mkdir (QERO_DIR .'/qero-packages/'. $package, 0777, true);

        file_put_contents (QERO_DIR .'/qero-packages/'. $package .'/branch.tar', $source::getPackageArchive ($package));

        $archive = new \PharData (QERO_DIR .'/qero-packages/'. $package .'/branch.tar');
        $archive->extractTo (QERO_DIR .'/qero-packages/'. $package);
        unset ($archive);
        \PharData::unlinkArchive (QERO_DIR .'/qero-packages/'. $package .'/branch.tar');

        $this->registerNewPackage ($package, $commit, $source);

        return true;
    }

    /**
     * Регистрация нового пакета в менеджере
     * 
     * @param string $package - полное название пакета
     * @param array $packageInfo - информация о пакете
     * [@param string $source = 'github'] - источник пакета
     * 
     */

    public function registerNewPackage ($package, $packageInfo, $source = 'github')
    {
        $sourceClass = $source;

        $source = explode ('\\', $source);
        $source = strtolower (end ($source));
        $packagePath = $source .':'. $package;

        foreach (array_slice (scandir (QERO_DIR .'/qero-packages/'. $package), 2) as $dir)
            if (is_dir (QERO_DIR .'/qero-packages/'. $package .'/'. $dir))
            {
                $folder = $dir;

                break;
            }
        
        if (!isset ($folder))
            $folder = str_replace ('/', '-', $package) .'-'. substr ($packageInfo['sha'], 0, 7);

        $this->settings['packages'][$packagePath] = array
        (
            'folder'    => $folder,
            'watermark' => $packageInfo[$sourceClass::$watermark]
        );

        $folder = QERO_DIR .'/qero-packages/'. $package .'/'. $this->settings['packages'][$packagePath]['folder'];
        $info   = array ();

        if (file_exists ($folder .'/qero-info.json'))
        {
            $info = json_decode (file_get_contents ($folder .'/qero-info.json'), true);

            foreach ($this->parse as $parse)
                if (isset ($info[$parse]))
                    $this->settings['packages'][$packagePath][$parse] = $info[$parse];
        }

        if (!isset ($this->settings['packages'][$packagePath]['entry_point']))
        {
            $name = $this->getPackageBlocks ($package);
            $name = $name['name'];
            
            foreach (array_merge (array ($name .'.php'), $this->enteringPoints) as $entryPoint)
                if (file_exists ($folder .'/'. $entryPoint))
                {
                    $this->settings['packages'][$packagePath]['entry_point'] = $entryPoint;

                    break;
                }
        }

        if (isset ($info['requires']))
        {
            $this->settings['packages'][$packagePath]['requires'] = $info['requires'];

            foreach ($info['requires'] as $repository)
                if (!isset ($this->settings['packages'][$repository]))
                    $this->installPackage ($repository);
        }

        if (isset ($info['after_install']))
            @require $folder .'/'. $info['after_install'];

        $this->updateSettings ();
        AutoloadGenerator::generateAutoload ();
    }

    /**
     * Удаление пакета
     * 
     * @param string $package - полное название пакета
     * 
     */

    public function deletePackage ($package)
    {
        $package = $this->getPackageBlocks ($package);

        \Qero\dir_delete (QERO_DIR .'/qero-packages/'. $package['full_name']);

        if (sizeof (scandir (dirname (QERO_DIR .'/qero-packages/'. $package['full_name']))) <= 2)
            \Qero\dir_delete (dirname (QERO_DIR .'/qero-packages/'. $package['full_name']));

        unset ($this->settings['packages'][$package['full_path']]);
        
        $this->updateSettings ();
        AutoloadGenerator::generateAutoload ();
    }

    /**
     * Обновление всех установленных пакетов
     */

    public function updatePackages ()
    {
        if (is_array ($this->settings['packages']))
        {
            $repos = array_unique (array_keys ($this->settings['packages']));

            foreach ($repos as $repo)
                if (isset ($this->settings['packages'][$repo]['requires']))
                    foreach ($this->settings['packages'][$repo]['requires'] as $requirement)
                        if (($index = array_search ($requirement, $repos)) !== false)
                            unset ($repos[$index]);

            foreach ($repos as $repository)
                $this->installPackage ($repository);
        }
    }

    /**
     * Получение списка PHP файлов в директории
     * 
     * @param string $folder - директория для анализа
     * [@param string $basefolder = null] - префикс директории, который будет удалён
     * 
     * @return array - возвращает список PHP файлов
     * 
     */

    public function getPhpsList ($folder, $basefolder = null)
    {
        $list = array ();

        if ($basefolder === null)
            $basefolder = $folder .'/';

        foreach (array_slice (scandir ($folder), 2) as $file)
        {
            $ext = explode ('.', $file);

            if (strtolower (end ($ext)) == 'php' && strpos ($file, '.') !== false)
                $list[] = str_replace ($basefolder, '', $folder .'/'. $file);

            elseif (is_dir ($folder .'/'. $file))
                $list = array_merge ($list, $this->getPhpsList ($folder .'/'. $file, $basefolder));
        }

        return $list;
    }

    /**
     * Получение списка зависимостей исходя из их приоритетности
     * 
     * @param array $packages - список пакетов для генерации
     * [@param array $requires = null] - список зависимостей
     * 
     * @return array - возвращает список зависимостей
     * 
     */

    public function getRequires ($packages, $requires = null)
    {
        if ($requires === null)
            $requires = array ();

        foreach ($packages as $package)
        {
            $package = $this->getPackageBlocks ($package);
            $package = $package['full_path'];

            if (!isset ($this->settings['packages'][$package]['requires']))
            {
                if (array_search ($package, $requires) === false)
                    $requires[] = $package;
            }

            else
            {
                $requires = array_merge ($requires, array_map (function ($requirement)
                {
                    $requirement = $this->getPackageBlocks ($requirement);

                    return $requirement['full_path'];
                }, $this->settings['packages'][$package]['requires']));

                $requires[] = $package;
            }
        }

        return array_unique ($requires);
    }

    /**
     * Обновление файла настроек
     */

    public function updateSettings ()
    {
        file_put_contents (QERO_DIR .'/qero-packages/qero-info.json', json_encode ($this->settings, defined ('JSON_PRETTY_PRINT') ? JSON_PRETTY_PRINT : 0));
    }

    /**
     * Получение информации из названия пакета
     * 
     * @param string $package - полное имя пакета
     * 
     */

    public function getPackageBlocks ($package)
    {
        $info   = explode (':', $package);
        $source = 'github';

        if (sizeof ($info) == 2)
            $source = strtolower ($info[0]);

        $info = explode ('/', end ($info));

        return array
        (
            'source'    => $source,
            'author'    => $info[0],
            'name'      => $info[1],
            'full_name' => implode ('/', $info),
            'full_path' => $source .':'. implode ('/', $info)
        );
    }
}

?>
