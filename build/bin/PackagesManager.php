<?php

namespace Qero\PackagesManager;
use Qero\Printer\Printer;
use Qero\Requester\Requester;

define ('QERO_AUTOGENERATE', '

/*
    Auto generated by Qero '. QERO_VERSION .'
    '. date ('Y/m/d H:i:s') .' (timestamp: '. time () .')
*/

');

class PackagesManager
{
    public $settings = array ();

    protected $parse = array
    (
        'version',
        'entry_point'
    );

    protected $enteringPoints = array
    (
        'qero-init.php',
        'qero-main.php',
        'main.php',
        'index.php',
        'autorun.php',
        'startup.php'
    );

    public function __construct ()
    {
        if (!file_exists (QERO_DIR .'/qero-packages/qero-info.json'))
            $this->updateSettings ();
        
        $this->settings = json_decode (file_get_contents (QERO_DIR .'/qero-packages/qero-info.json'), true);
    }

    /**
     * @param string $package
     * 
     */

    public function installPackage ($package)
    {
        $info = json_decode (Requester::getRequest ('https://api.github.com/repos/'. $package), true);

        if (!is_array ($info) || isset ($info['message']))
        {
            Printer::say ('Repository "'. $package .'" not founded. Skipping...');

            return false;
        }

        Printer::say ('Installing "'. $package .'"...');

        $commit = json_decode (Requester::getRequest ('https://api.github.com/repos/'. $package .'/commits'), true);
        $commit = $commit[0];

        \Qero\dir_delete (QERO_DIR .'/qero-packages/'. $info['full_name']);
        mkdir (QERO_DIR .'/qero-packages/'. $info['full_name'], 0777, true);

        file_put_contents (QERO_DIR .'/qero-packages/'. $info['full_name'] .'/branch.tar', Requester::getRequest ('https://api.github.com/repos/'. $package .'/tarball'));

        $archive = new \PharData (QERO_DIR .'/qero-packages/'. $info['full_name'] .'/branch.tar');
        $archive->extractTo (QERO_DIR .'/qero-packages/'. $info['full_name']);

        unlink (QERO_DIR .'/qero-packages/'. $info['full_name'] .'/branch.tar');

        $this->registerNewPackage ($info['full_name'], $commit);

        return true;
    }

    /**
     * @param string $package
     * @param array $packageInfo
     * 
     */

    public function registerNewPackage ($package, $packageInfo)
    {
        $this->settings['packages'][$package] = array
        (
            'folder'  => str_replace ('/', '-', $package) .'-'. substr ($packageInfo['sha'], 0, 7),
            'sha'     => $packageInfo['sha'],
            'node_id' => $packageInfo['node_id']
        );

        $folder = QERO_DIR .'/qero-packages/'. $package .'/'. $this->settings['packages'][$package]['folder'];
        $info   = array ();

        if (file_exists ($folder .'/qero-info.json'))
        {
            $info = json_decode (file_get_contents ($folder .'/qero-info.json'), true);

            foreach ($this->parse as $parse)
                if (isset ($info[$parse]))
                    $this->settings['packages'][$package][$parse] = $info[$parse];
        }

        if (!isset ($this->settings['packages'][$package]['entry_point']))
        {
            $name = explode ('/', $package);
            
            foreach (array_merge (array (end ($name) .'.php'), $this->enteringPoints) as $entryPoint)
                if (file_exists ($folder .'/'. $entryPoint))
                {
                    $this->settings['packages'][$package]['entry_point'] = $entryPoint;

                    break;
                }

            if (!isset ($this->settings['packages'][$package]['entry_point']))
            {
                $this->settings['packages'][$package]['entry_point'] = 'qero-init.php';

                file_put_contents ($folder .'/qero-init.php', '<?php'. QERO_AUTOGENERATE . implode ("\n", array_map (function ($file)
                {
                    return '@require \''. $file .'\';';
                }, $this->getPhpsList ($folder))) ."\n\n?>\n");
            }
        }

        if (isset ($info['requires']))
        {
            $this->settings['packages'][$package]['requires'] = $info['requires'];

            foreach ($info['requires'] as $repository)
                $this->installPackage ($repository);
        }

        $this->updateSettings ();
        $this->constructAutoloadFile ();
    }

    /**
     * @param string $package
     * 
     */

    public function deletePackage ($package)
    {
        \Qero\dir_delete (QERO_DIR .'/qero-packages/'. $package);

        if (sizeof (scandir (dirname (QERO_DIR .'/qero-packages/'. $package))) <= 2)
            \Qero\dir_delete (dirname (QERO_DIR .'/qero-packages/'. $package));

        unset ($this->settings['packages'][$package]);
        
        $this->updateSettings ();
        $this->constructAutoloadFile ();
    }

    public function updatePackages ()
    {
        if (is_array ($this->settings['packages']))
        {
            $repos = array_keys ($this->settings['packages']);

            foreach ($repos as $repo)
                if (isset ($this->settings['packages'][$repo]['requires']))
                    foreach ($this->settings['packages'][$repo]['requires'] as $requirement)
                        if (($index = array_search ($requirement, $repos)) !== false)
                            unset ($repos[$index]);

            foreach ($repos as $repository)
                $this->installPackage ($repository);
        }
    }

    /**
     * @param string $folder
     * @param string $basefolder
     * 
     */

    protected function getPhpsList ($folder, $basefolder = null)
    {
        $list = array ();

        if ($basefolder === null)
            $basefolder = $folder .'/';

        foreach (array_slice (scandir ($folder), 2) as $file)
        {
            $ext = explode ('.', $file);

            if (strtolower (end ($ext)) == 'php')
                $list[] = str_replace ($basefolder, '', $folder .'/'. $file);

            elseif (is_dir ($folder .'/'. $file))
                $list = array_merge ($list, $this->getPhpsList ($folder .'/'. $file, $basefolder));
        }

        return $list;
    }

    public function constructAutoloadFile ()
    {
        $packages = $this->settings['packages'];

        $autoload  = '<?php'. QERO_AUTOGENERATE;
        $autoload .= implode ("\n", array_map (function ($file) use ($packages)
        {
            return 'require \''. $file .'/'. $packages[$file]['folder'] .'/'. $packages[$file]['entry_point'] .'\';';
        }, $this->getRequires (array_keys ($this->settings['packages']))));

        file_put_contents (QERO_DIR .'/qero-packages/autoload.php', $autoload ."\n\n?>\n");
    }

    /**
     * @param array $packages
     * @param array $requires
     * 
     */

    protected function getRequires ($packages, $requires = null)
    {
        if ($requires === null)
            $requires = array ();

        foreach ($packages as $package)
            if (!isset ($this->settings['packages'][$package]['requires']))
            {
                if (array_search ($package, $requires) === false)
                    $requires[] = $package;
            }

            else $requires = array_merge ($requires, $this->settings['packages'][$package]['requires'], array ($package));

        return $requires;
    }

    public function updateSettings ()
    {
        file_put_contents (QERO_DIR .'/qero-packages/qero-info.json', json_encode ($this->settings, defined ('JSON_PRETTY_PRINT') ? JSON_PRETTY_PRINT : 0));
    }
}

?>
